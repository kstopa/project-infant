/************************************************************************
                        LuaScriptGenerator.cpp - By K. Stopa

	Infant (c) K. Stopa
	V CUSL 2010 - 2011.

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <http://www.gnu.org/licenses/>.

**************************************************************************/

#include "LuaScriptGenerator.hpp"


LuaScriptGenerator::LuaScriptGenerator()
{
    //ctor
}


int LuaScriptGenerator::Open(string path)
{
    lua_script.open(path.c_str(), ios::trunc);
    if (lua_script.fail())
        return -1;
    else
        return 0;
}


int LuaScriptGenerator::Close()
{
    lua_script.close();
    if (lua_script.fail())
        return -1;
    else
        return 0;
}

//
int LuaScriptGenerator::GenerateScript(SomethingCollection* sc)
{
    bool done = false;
    //if (!lua_script.fail())
    //{
        //generacion de reglas de comparacion de puntos similar es en la coleccion.
        lua_script << "-- Code generated by Infant Lua Code Generator. GPL v.3 licence.      --\n";
        lua_script << "--                 Infant - K. Stopa 2010 - 2011.                     --\n";
        lua_script << "--____________________________________________________________________--\n";
        //lua_script << "var ::= is_it\n";
        lua_script << "is_it = 0 \n";
        //done = done | GenerateMinMaxVertexRules(sc);
        done = done | GenerateCoordinateRules(sc);
    //}
    return done;
}


bool LuaScriptGenerator::GenerateMinMaxVertexRules(SomethingCollection* sc)
{
	lua_script << "-- Total vertex number comparation rules --\n";
	int min_vertex = 99999;
	int max_vertex = 0;
	// search max and min number of vertex in sc coleccion objects.
	for (unsigned int nS = 0; nS < sc->size(); nS++)
	{
		int n_vertex = 0;
		for (unsigned int nL = 0; nL < sc->at(nS).Shapes->size(); nL++)    // niveles
		{
			for (unsigned int nVC = 0; nVC < sc->at(nS).Shapes->at(nL).size(); nVC++)  // vectores de coordendas
		    {
				n_vertex += sc->at(nS).Shapes->at(nL).at(nVC).size();
		    }
		}
		if (n_vertex < min_vertex) min_vertex = n_vertex;
		if (n_vertex > max_vertex) max_vertex = n_vertex;
	}
	// writes rule tath check if the number of vertexes in compared (obj_table[0] - 10000) are between +/- 20% min and max values.
	int p80 = (min_vertex + max_vertex)/2 * 0.80;
	lua_script << "if ( obj_table[0] - 10000 < " << min_vertex-p80 << " or obj_table[0] - 10000 > " << max_vertex+p80 << ") then\n";
	lua_script << "    return\n";
	lua_script << "end\n";
	return true;
}

//
bool LuaScriptGenerator::GenerateCoordinateRules(SomethingCollection* sc)
{
    vector<Coordinate> v = vector<Coordinate>();
    v = sc->GetSimilarPoints();
    if (v.size() > 0)
    {
        lua_script << "-- Coordinate comparation rules. --\n";
        //lua_script << "var ::= cont_ok\r\n";    // Contador de aciertos.
        lua_script << "cont_ok = 0\n";
        lua_script << "is_x = true\n";
        lua_script << "for n,val  in pairs(obj_table) do\n"; // 2 ya que el primer elemento de la tabla lo ocupa el numero de puntos totales.
        lua_script << "  if (obj_table[n] < 1000) then\n"; // si no es un codigo de nivel.
        lua_script << "    if (is_x) then\n";
        lua_script << "      if (obj_table[n] >= " << v[0].X - 10.0 << " and obj_table[n] <= " <<  v[0].X + 10.0 << " and obj_table[n+1] >= " << v[0].Y - 10.0 << " and obj_table[n+1] <=" << v[0].Y + 10.0 << " ) then\n";
        lua_script << "         cont_ok = cont_ok + 1\n";
        for (unsigned int nV = 1; nV < v.size(); nV++)
        {

            lua_script << "      elseif (obj_table[n] >= " << v[nV].X - 10.0 << " and obj_table[n] <= " <<  v[nV].X + 10.0 << " and obj_table[n+1] >= " << v[nV].Y - 10.0 << " and obj_table[n+1] <=" << v[nV].Y + 10.0 << " ) then\n";
            lua_script << "         cont_ok = cont_ok + 1\n";
        }
        lua_script << "      end\n";
        lua_script << "      is_x = false\n";
        lua_script << "    else\n";
        lua_script << "      is_x = true\n";
        lua_script << "    end\n";
        lua_script << "  else\n";
        lua_script << "    is_x = true\n";
        lua_script << "  end\n";
        lua_script << "end\n";

        lua_script << "  is_it = 100*(cont_ok/" << v.size() << ")\n";
        return true;
    }
    else
        return false;
}


bool LuaScriptGenerator::GenerateLevelRules(SomethingCollection* sc)
{
	return false;
}



LuaScriptGenerator::~LuaScriptGenerator()
{
    //dtor
}
